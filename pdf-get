#!/usr/bin/env python3
import argparse as argp
import requests
from bs4 import BeautifulSoup

#parser = argp.ArgumentParser(description='Get some bookz')
#parser.add_argument('book_name', metavar='Book', type=str,
#                    help='da book to get')


class Library(object):
    def __init__(self, query):
        self.url = "http://gen.lib.rus.ec/"

        results = self.search(query)
        self.print_results(results)

    def search(self, query):
        q = "http://gen.lib.rus.ec/search.php?req=" + query.replace(" ", "+    ") + "&lg_topic=libgen&open=0&view=simple&res=25&phrase=0&column=def"
        r = requests.get(q).text
        soup = BeautifulSoup(r, "html.parser")
        tr_list = soup.find_all("tr")[3:]

        results = []

        for tr in tr_list:
            item = {}
            try:
                td_list = tr.find_all("td")
                # Sorry for this... If you can find a better way, please do without screwing it up.
                t = BeautifulSoup(str(td_list[2]).split("<font")[0]+"</a></td>", "html.parser")

                item["title"] = t.a.text
                item["url"] = t.a.get("href")
                item["year"] = int(td_list[4].text)
                item["pages"] = td_list[5].text
                item["language"] = td_list[6].text
                item["size"] = td_list[7].text
                item["extension"] = td_list[8].text

                results.append(item)

            except Exception as e:
                pass
            else:
                pass

        return results

    def print_results(self, results):
        results_sorted = sorted(results, key=lambda k: k["year"])[::-1]

        for item in results_sorted:
            item_id = "(%s)" % (str(results_sorted.index(item)))
            print("%-4s %-70s %4s" % (item_id, item["title"][0:69], item["year"]))

lib = Library("Art of Exploitation")
